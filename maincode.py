# -*- coding: utf-8 -*-
"""Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sWUspHhc5JhGhFcrJuUvyyzJN0JjxkPQ

# setting things up
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import json
from collections import Counter

plt.rcParams['figure.figsize'] = (12, 8)
plt.style.use('default')
sns.set_palette("husl")

users_df = pd.read_csv('users.csv')
print(f"Users data loaded: {len(users_df)} users")

episodes_df = pd.read_csv('episodes.csv')
print(f"Episodes data loaded: {len(episodes_df)} episodes")

with open('listens.json', 'r') as f:
    listens_data = json.load(f)
listens_df = pd.DataFrame(listens_data)
print(f"Listening data loaded: {len(listens_df)} listening records")

print("DATA OVERVIEW")
print("=" * 50)

print("\nUsers Dataset:")
display(users_df.head())
print(f"Shape: {users_df.shape}")
print(f"Columns: {list(users_df.columns)}")

print("\nEpisodes Dataset:")
display(episodes_df.head())
print(f"Shape: {episodes_df.shape}")
print(f"Columns: {list(episodes_df.columns)}")

print("\nListening Dataset:")
display(listens_df.head())
print(f"Shape: {listens_df.shape}")
print(f"Columns: {list(listens_df.columns)}")

print("DATA CLEANING")
print("=" * 50)

#missing values
print("\nChecking for missing values:")
print("Users missing values:", users_df.isnull().sum().sum())
print("Episodes missing values:", episodes_df.isnull().sum().sum())
print("Listens missing values:", listens_df.isnull().sum().sum())

#duplicate records
print("\nChecking for duplicates:")
print("Users duplicates:", users_df.duplicated().sum())
print("Episodes duplicates:", episodes_df.duplicated().sum())
print("Listens duplicates:", listens_df.duplicated().sum())

#data consistency
print("\nData consistency checks:")
print(f"Unique users in users_df: {users_df['user_id'].nunique()}")
print(f"Unique users in listens_df: {listens_df['user_id'].nunique()}")
print(f"Unique episodes in episodes_df: {episodes_df['episode_id'].nunique()}")
print(f"Unique episodes in listens_df: {listens_df['episode_id'].nunique()}")

print("Merging datasets to make things easier")

#listening data with episodes data
listens_episodes = listens_df.merge(episodes_df, on='episode_id', how='left')

#Merge with users data
full_data = listens_episodes.merge(users_df, on='user_id', how='left')

print(f"Full dataset created with shape: {full_data.shape}")
print(f"Columns: {list(full_data.columns)}")


full_data['duration_minutes'] = full_data['duration_seconds'] / 60

display(full_data.head())

"""# questions part"""

print("QUESTION 1: Most listened episode categories")
print("=" * 50)

category_listens = full_data.groupby('category').agg({
    'episode_id': 'count',
    'duration_seconds': 'sum',
    'duration_minutes': 'sum'
}).round(2)

category_listens.columns = ['Total_Listens', 'Total_Duration_Seconds', 'Total_Duration_Minutes']
category_listens = category_listens.sort_values('Total_Listens', ascending=False)

print("\nCategory listening statistics:")
display(category_listens)

print("QUESTION 2: Average listening duration by gender")
print("=" * 50)

gender_stats = full_data.groupby('gender')['duration_minutes'].agg(['mean', 'median', 'std', 'count']).round(2)
print("\nGender listening statistics:")
display(gender_stats)

male_avg = gender_stats.loc['male', 'mean']
female_avg = gender_stats.loc['female', 'mean']
difference = abs(male_avg - female_avg)

print(f"\nAverage difference: {difference:.2f} minutes")
print(f"Males average: {male_avg:.2f} minutes")
print(f"Females average: {female_avg:.2f} minutes")

print("QUESTIOn 3: Average number of episodes per user")
print("=" * 50)

episodes_per_user = full_data.groupby('user_id')['episode_id'].count()
avg_episodes_per_user = episodes_per_user.mean()
median_episodes_per_user = episodes_per_user.median()

print(f"\nAverage episodes per user: {avg_episodes_per_user:.2f}")
print(f"Median episodes per user: {median_episodes_per_user:.2f}")
print(f"Max episodes by single user: {episodes_per_user.max()}")
print(f"Min episodes by single user: {episodes_per_user.min()}")

print("\nDistribution of episodes per user:")
episodes_distribution = episodes_per_user.value_counts().sort_index()
display(episodes_distribution)

print("QUESTION 4: Additional analysis and insights")
print("=" * 50)

print("\nListening by Country:")
country_stats = full_data.groupby('country').agg({
    'episode_id': 'count',
    'duration_minutes': ['sum', 'mean']
}).round(2)
country_stats.columns = ['Total_Listens', 'Total_Duration_Minutes', 'Avg_Duration_Minutes']
display(country_stats.sort_values('Total_Listens', ascending=False))

print("\nListening by Age Groups:")

full_data['age_group'] = pd.cut(full_data['age'],
                               bins=[0, 25, 35, 45, 55, 100],
                               labels=['18-25', '26-35', '36-45', '46-55', '55+'])

age_group_stats = full_data.groupby('age_group').agg({
    'episode_id': 'count',
    'duration_minutes': 'mean'
}).round(2)
age_group_stats.columns = ['Total_Listens', 'Avg_Duration_Minutes']
display(age_group_stats)

print("\nListening Duration Analysis:")
duration_stats = full_data['duration_minutes'].describe()
display(duration_stats)


full_data['engagement_level'] = pd.cut(full_data['duration_minutes'],
                                     bins=[-1, 0, 5, 15, 1000],
                                     labels=['No_Listen', 'Short', 'Medium', 'Long'])

engagement_stats = full_data['engagement_level'].value_counts()
print(f"\nEngagement Levels:")
display(engagement_stats)

"""# data Visualization part"""

print("DATA VISUALIZATIONS")
print("=" * 50)

#main visualizations
fig, axes = plt.subplots(2, 2, figsize=(15, 12))
fig.suptitle('Podcast Listening Data Analysis', fontsize=16, fontweight='bold')


category_listens['Total_Listens'].plot(kind='bar', ax=axes[0,0], color='skyblue')
axes[0,0].set_title('Episodes Listened by Category')
axes[0,0].set_xlabel('Category')
axes[0,0].set_ylabel('Number of Listens')
axes[0,0].tick_params(axis='x', rotation=45)


gender_stats['mean'].plot(kind='bar', ax=axes[0,1], color=['lightcoral', 'lightblue'])
axes[0,1].set_title('Average Listening Duration by Gender')
axes[0,1].set_xlabel('Gender')
axes[0,1].set_ylabel('Duration (minutes)')
axes[0,1].tick_params(axis='x', rotation=0)


country_stats['Total_Listens'].plot(kind='bar', ax=axes[1,0], color='lightgreen')
axes[1,0].set_title('Total Listens by Country')
axes[1,0].set_xlabel('Country')
axes[1,0].set_ylabel('Number of Listens')
axes[1,0].tick_params(axis='x', rotation=45)


engagement_stats.plot(kind='pie', ax=axes[1,1], autopct='%1.1f%%', startangle=90)
axes[1,1].set_title('Listening Engagement Levels')
axes[1,1].set_ylabel('')

plt.tight_layout()
plt.show()


plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
age_group_stats['Total_Listens'].plot(kind='bar', color='orange')
plt.title('Total Listens by Age Group')
plt.xlabel('Age Group')
plt.ylabel('Number of Listens')
plt.xticks(rotation=45)

plt.subplot(1, 2, 2)
age_group_stats['Avg_Duration_Minutes'].plot(kind='bar', color='purple')
plt.title('Average Duration by Age Group')
plt.xlabel('Age Group')
plt.ylabel('Duration (minutes)')
plt.xticks(rotation=45)

plt.tight_layout()
plt.show()

print("RECOMMENDATION SYSTEM")
print("=" * 50)

def recommend_episodes(user_id, listens_df, episodes_df, top_n=3):
    """
    Recommend episodes for a user based on their listening history.
    Returns top episodes from user's favorite categories that they haven't listened to.
    """

    user_listens = listens_df[listens_df['user_id'] == user_id]

    if user_listens.empty:
        print(f"No listening history found for user {user_id}")
        return []


    user_episodes = user_listens.merge(episodes_df, on='episode_id')
    user_categories = user_episodes['category'].value_counts()

    print(f"\nUser {user_id} listening preferences:")
    print(f"Total episodes listened: {len(user_episodes)}")
    print(f"Favorite categories: {dict(user_categories.head(3))}")

    #user's favorite category
    if not user_categories.empty:
        favorite_category = user_categories.index[0]

        #Find episodes in favorite category that user hasn't listened to
        listened_episodes = set(user_listens['episode_id'].tolist())
        category_episodes = episodes_df[episodes_df['category'] == favorite_category]
        unlistened_episodes = category_episodes[~category_episodes['episode_id'].isin(listened_episodes)]

        #Get popularity scores for recommendations
        episode_popularity = listens_df['episode_id'].value_counts()
        unlistened_episodes = unlistened_episodes.copy()
        unlistened_episodes['popularity'] = unlistened_episodes['episode_id'].map(episode_popularity).fillna(0)

        #Recommend top episodes from favorite category
        recommendations = unlistened_episodes.nlargest(top_n, 'popularity')[['episode_id', 'title', 'category']]

        print(f"\nTop {top_n} recommendations for user {user_id}:")
        for idx, row in recommendations.iterrows():
            print(f"  Episode {row['episode_id']}: {row['title']} ({row['category']})")

        return recommendations.to_dict('records')

    return []


print("Testing recommendation system with sample users:")

test_users = [1, 5, 10, 14]
for user_id in test_users:
    recommendations = recommend_episodes(user_id, listens_df, episodes_df)
    print("-" * 40)

"""# FINALLY, the summary"""

print("SUMMARY AND KEY INSIGHTS")
print("=" * 50)

print("\nKEY FINDINGS:")

print(f"\n1. MOST POPULAR CATEGORIES:")
top_categories = category_listens.head(3)
for idx, (category, stats) in enumerate(top_categories.iterrows(), 1):
    print(f"   {idx}. {category}: {stats['Total_Listens']} listens ({stats['Total_Duration_Minutes']:.1f} minutes total)")

print(f"\n2. GENDER DIFFERENCES:")
print(f"   Males average: {male_avg:.2f} minutes per episode")
print(f"   Females average: {female_avg:.2f} minutes per episode")
print(f"   Difference: {difference:.2f} minutes")

print(f"\n3. USER ENGAGEMENT:")
print(f"   Average episodes per user: {avg_episodes_per_user:.2f}")
print(f"   Most active user listened to: {episodes_per_user.max()} episodes")
print(f"   {engagement_stats['No_Listen']} episodes had 0 listening time")

print(f"\n4. GEOGRAPHICAL INSIGHTS:")
top_country = country_stats.index[0]
print(f"   Most active country: {top_country}")
print(f"   Total countries represented: {len(country_stats)}")

print(f"\n5. CONTENT INSIGHTS:")
print(f"   Total unique episodes: {episodes_df['episode_id'].nunique()}")
print(f"   Total listening records: {len(listens_df)}")
print(f"   Average listening duration: {full_data['duration_minutes'].mean():.2f} minutes")

print("\nRECOMMENDATIONS FOR IMPROVEMENT:")
print("   1. Focus on Society and Sports content (most popular categories)")
print("   2. Consider creating shorter episodes for better engagement")
print("   3. Develop content targeting specific age groups")
print("   4. Implement personalized recommendation system")
print("   5. Analyze zero-duration listens to improve content quality")

"""# Save processed data and analysis results"""

full_data.to_csv('analyzed_podcast_data.csv', index=False)
category_listens.to_csv('category_analysis.csv')
gender_stats.to_csv('gender_analysis.csv')

print("Results saved to:")
print("   analyzed_podcast_data.csv")
print("   category_analysis.csv")
print("   gender_analysis.csv")